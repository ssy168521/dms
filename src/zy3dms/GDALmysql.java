package zy3dms;
import java.io.File;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;

import org.gdal.gdal.Band;
import org.gdal.gdal.Dataset;
import org.gdal.gdal.Driver;
import org.gdal.gdal.gdal;
import org.gdal.gdalconst.gdalconstConstants;
import org.gdal.ogr.DataSource;
import org.gdal.ogr.Feature;
import org.gdal.ogr.FeatureDefn;
import org.gdal.ogr.FieldDefn;
import org.gdal.ogr.Geometry;
import org.gdal.ogr.Layer;
import org.gdal.ogr.ogr;
import org.hibernate.validator.xml.FieldType;

import com.sasmac.gdaldatapool.DataSouPoolUtil;
import com.sasmac.system.ReadConf;

/*
 * servlet调用java类时，当java类中调用了dll时，servlet将会调用失败
解决方案：
方法一、将所需的dll放置在javahome/jre/bin中，注意：如果使用myeclipse编写代码时，myeclipse会自带jre，需要放置在其jre/bin中
方法二、将所需的dll放置在tomcat/bin中

GDAL调用时所需的dll并把gdal.jar添加到build path
gdal.dll及其依赖项
gdalconstjni.dll
gdaljni.dll
ogrjni.dll
osrjni.dll

 */





public class GDALmysql {
	
	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
/*		String fileName_tif = "F:\\sheng200 8_2\\out11.TIF";  
		gdal.AllRegister();

		Dataset hDataset = gdal.Open(fileName_tif, gdalconstConstants.GA_ReadOnly);
		if (hDataset == null)
		{
			System.err.println("GDALOpen failed - " + gdal.GetLastErrorNo());
			System.err.println(gdal.GetLastErrorMsg());

			System.exit(1);
		}

		Driver hDriver = hDataset.GetDriver();
		System.out.println("Driver: " + hDriver.getShortName() + "/" + hDriver.getLongName());
		int iXSize = hDataset.getRasterXSize();
		int iYSize = hDataset.getRasterYSize();
		System.out.println("Size is " + iXSize + ", " + iYSize);

		Band band = hDataset.GetRasterBand(1);
		//这里是DEM数据，所以声明一个int数组来存储，如果是其他数据类型，声明相应的类型即可
		int buf[] = new int[iXSize];	
		
		for(int i=0; i<10iYSize; i++)
		{
			band.ReadRaster(0, i, iXSize, 1, buf);	//读取一行数据
			
			// 下面是输出像元值，为了方便，我只输出了左上角 10×10的范围内的数据
			for(int j=0; j<10iXSize; j++)
				System.out.print(buf[j] + ", ");
			System.out.println("\n");
		}
		hDataset.delete();
		
		// 可选
		gdal.GDALDestroyDriverManager();*/
		
		//String sss="{\"rings\":[[[116.46204169966406,37.08307030294519],[117.96648136290224,37.14093336691589],[117.73502910701944,35.4050414477949],[115.70982186804495,35.4629045117656],[116.46204169966406,37.08307030294519]]]}";//,\"spatialReference\":{\"wkid\":4326,\"latestWkid\":4326}
		String sss="{\"x\":119.06587957834554,\"y\":33.26410808087901,\"spatialReference\":{\"wkid\":4326,\"latestWkid\":4326}}";
		
		Geometry pGeom=Geometry.CreateFromJson(sss);
		
		
		//String wkt="POLYGON ((66.93125894074512 35.5207675757363,70.1715905231043 34.421369360293006,70.1715905231043 34.305643232351606,69.4193706914852 30.486681010285427,64.96391476574134 32.33829905734781,66.93125894074512 35.5207675757363))";
				
		//Layer pLayer=GDALmysql.ExecuteQuery("select F_DATAID from tbs_zy3_bm where F_OVERALLDATAQUALITY<=20",wkt,"WebRoot/conf/dbConnConf.properties");
		
		String strWkt="POLYGON ((117.81939999964618 36.031878999731646,117.81188000013822 36.03794899984871,117.80605999985403 36.041718000017624,117.7943699996789 36.047427999727745,117.7868999997778 36.05260099986498,117.77967999970963 36.057079000340764,117.77081000002443 36.06273700035183,117.76276000036694 36.06814599967669,117.75417000009907 36.07379200003396,117.74358000026814 36.07856000038788,117.73509000011325 36.07825099963384,117.72341000039899 36.07433299979118,117.71902000038244 36.06868400019499,117.714009999665 36.06076000005038,117.70932999977038 36.054428000446535,117.70470000038176 36.05038800037596,117.69447000005846 36.047359000144354,117.66903000007744 36.04596299964538,117.64851999982398 36.04951499970383,117.6362299998699 36.054526999614154,117.62479999998868 36.05998600034451,117.61536000010881 36.06586799988935,117.60869999977433 36.0703280004347,117.59613000040304 36.07580200005788,117.58370999985232 36.0760040003762,117.57012999978883 36.0746190003843,117.55584999983341 36.0794300000224,117.55086000003791 36.083171999846,117.54702999975507 36.08803900026686,117.54388999980267 36.09839199996475,117.54181999971092 36.10621299985797,117.53631000022688 36.111565000152666,117.52895999956206 36.11145400043188,117.52271000014082 36.109718000447856,117.51528000028486 36.10640299962313,117.50783999996804 36.102398000266646,117.49526000013577 36.095722000093986,117.48383000025456 36.0899470000856,117.4707800003406 36.087399000442645,117.45679000026325 36.09264799958669,117.45587000012256 36.10182199979539,117.44986000007327 36.110385999764105,117.44520999976282 36.116866999941124,117.4448599998168 36.126488000070594,117.44924999983334 36.132602999564085,117.45560000026694 36.13869099961158,117.46254999958023 36.14568299996159,117.46779000010804 36.15201599961159,117.47043999995617 36.15655100001686,117.46807999998623 36.16437500004838,117.46276999982899 36.166973000197515,117.45661000005975 36.169586000138736,117.45045000029063 36.1719670001774,117.44579000041847 36.17798999992658,117.44362000021363 36.18214399985618,117.44128000026626 36.19088399984406,117.4415399996609 36.20232400018625,117.44028000003516 36.20898399962135,117.4352500001944 36.21112100010362,117.42873999957988 36.21099100040635,117.42136000023015 36.20972399955855,117.40891000009526 36.209224999938726,117.39984000018399 36.20889700010753,117.39083000034054 36.21063200004545,117.38669999971864 36.21504200008462,117.38519000025985 36.22376600023421,117.38927000037563 36.22874500042201,117.39416000005804 36.23256300015163,117.39988999979084 36.235916000030045,117.40741999975978 36.243361999724186,117.41131999967206 36.25338000016757,117.41121999955897 36.2609369995825,117.40712000031999 36.267410000290056,117.39348999975027 36.277682999897536,117.38905000012699 36.28163899969326,117.386890000383 36.28670899957916,117.38142999960655 36.29548999965834,117.38068999966936 36.3005370002827,117.380909999918 36.3099249995642,117.38222999961158 36.318377999812185,117.38380999959918 36.32568400024735,117.38421999961304 36.33093999971402,117.38152999971965 36.33762000007107,117.37598000019034 36.34296800018137,117.37069999961739 36.34716400024837,117.36488000023257 36.35297400007153,117.35653000023592 36.359959000098854,117.35296999980869 36.365508999628105,117.3455899995597 36.377746999883186,117.34629999991262 36.38415100010809,117.34422999982087 36.393112000390715,117.33878999996625 36.403721000198175,117.33565000001386 36.41544300004978,117.33331000006649 36.425549000053024,117.3330200001883 36.43792000014366,117.33610000007297 36.44886800028934,117.3407799999676 36.45544400034896,117.34024000025647 36.46343600003081,117.34830000037493 36.45531499979842,117.35522999966565 36.44744100016004,117.36330000024498 36.439319999927704,117.36804999976926 36.43605000027793,117.38076000019817 36.433594000379344,117.39044999991097 36.43575300007711,117.39572999958466 36.4439280001007,117.40327999957617 36.452525999838144,117.41086000005134 36.46181499995197,117.41689999968492 36.465855000022486,117.42487999971286 36.46734999968908,117.43426000042427 36.46813599994812,117.44276000014077 36.467793000324775,117.45096999997918 36.46653399984581,117.45835000022817 36.46688799997622,117.46463000013307 36.468402999665386,117.47240999993494 36.47402199967735,117.48252000012258 36.48166300026645,117.4860199995826 36.48619499963411,117.4909999998165 36.49276700040866,117.49715000002402 36.501152000219975,117.50911999961636 36.50372700020819,117.51955000016574 36.50037000014538,117.5417300000588 36.501880999650155,117.5511400003544 36.50334899987081,117.55914999996673 36.50620700031379,117.56520000006117 36.51001000025133,117.570430000128 36.51520200036509,117.57683000016846 36.52128600022826,117.58183000042493 36.52876999987541,117.58703999956981 36.533042999894576,117.59566999988306 36.53749500007115,117.60426999971264 36.540801999627774,117.61230000024682 36.54411300026811,117.62086999959286 36.54604300020168,117.63239999958705 36.54128300021648,117.64945999998724 36.530253999934246,117.66267999964373 36.52501300025972,117.67789999976253 36.520419999878754,117.69231000031459 36.51766999991759,117.71726000019146 36.51589599998056,117.72863999956655 36.51662800044835,117.74518999983991 36.52017200013802,117.75169999955506 36.51899699993385,117.76116000035688 36.5115130002867,117.75987000024747 36.50580999999988,117.75607000044829 36.50129300042437,117.75614999963943 36.493504000207565,117.75741999972615 36.48775499959902,117.75979999971867 36.48084600037703,117.76077999992731 36.47510099995287,117.76147000025765 36.46868099988973,117.76186999981053 36.46226099982664,117.76254000011829 36.45537900005064,117.76459999974907 36.44755600006522,117.7676000004426 36.44269599996704,117.77955999957396 36.43379599979829,117.79083000017363 36.43085900021026,117.80217999996444 36.43066800039901,117.81046000033155 36.432815999589764,117.82179999966138 36.43262499977851,117.82735999965155 36.42840599955059,117.8306399997623 36.423537999982955,117.83945000027893 36.413769000225784,117.84450000014226 36.41184999989997,117.85006999969414 36.40808900009989,117.85558000007745 36.402266999723565,117.85937999987664 36.39601900039452,117.8622699999961 36.387950999907275,117.8641199998392 36.38265200025711,117.86897999993744 36.37386299980915,117.8753700004163 36.36894199959704,117.88264000009133 36.36537599979255,117.88990000020465 36.361584000362086,117.89632000026779 36.35826500025229,117.90248000003692 36.355407999855345,117.90886999961651 36.35094099988669,117.91269999989925 36.34606199981198,117.91156999997088 36.33577699965133,117.91165999962288 36.32913200000837,117.91179999978124 36.32409299975279,117.91306000030625 36.31811500027925,117.92080000006297 36.31156200038055,117.92779000032078 36.30823099971758,117.93267000044159 36.30058299970517,117.93169000023306 36.295795000228,117.92925999973431 36.29011199996381,117.92599999964625 36.28513299977607,117.92412000021886 36.27852199990173,117.92480999964994 36.272784999846294,117.92947999998296 36.26766200021518,117.93622000040784 36.26570900012081,117.94501000000253 36.266463999850146,117.95576999957598 36.26649899966486,117.96369000043558 36.26658199989362,117.9748400000002 36.267464000081304,117.97262999975021 36.262295000128404,117.97075999988442 36.25637399968514,117.96858000011798 36.24931299975174,117.96410000044932 36.241153999566336,117.95976999960135 36.22817999955845,117.95955999981356 36.22085600009217,117.95822000009741 36.21354700041803,117.95635999979334 36.20785899992336,117.95116000021005 36.204060000170216,117.94037000015305 36.20242300025319,117.92993000004208 36.20330000021039,117.92080999962457 36.20094300037874,117.91306000030625 36.196731999620226,117.91085999961786 36.18852599996626,117.90808999963406 36.1805609997304,117.9106299998075 36.17021200021685,117.9115400003866 36.16218199968267,117.91103000025964 36.15394600044442,117.90225999978827 36.133487999890065,117.89786000021013 36.12738400000433,117.89177000007032 36.121769000176755,117.8850600001291 36.114101000141716,117.87915000019291 36.1045879995948,117.87412000035215 36.09643200044701,117.86908999961213 36.08804699973632,117.86296000032655 36.08036800009353,117.85377999984121 36.07480600001111,117.84263999983818 36.07041900013286,117.83186000024216 36.06854600012889,117.82716000032485 36.061297999669364,117.82724000041526 36.05373800011614,117.8252899995598 36.04438399970394,117.82090000044252 36.038276999679965,117.81939999964618 36.031878999731646))";
		String strSQL="select FID,F_DATANAME,F_DATAID,F_SCENEPATH,F_SCENEROW,F_ORBITID,F_SCENEDATE,F_OVERALLDATAQUALITY from tbs_zy3_bm where F_OVERALLDATAQUALITY>=0 and F_OVERALLDATAQUALITY<=20 and F_SCENEDATE>='2013-02-01' and F_SCENEDATE<='2014-02-05'";
		Layer pLayer=GDALmysql.ExecuteQuery(strSQL,strWkt,"WebRoot/conf/dbConnConf.properties");
		String geojsonstr=pLayer.exporttojson();
		System.out.println(geojsonstr);
		//LayerToGeoJSONFile(pLayer, "temp.geojson");
	}

	
	public static DataSource GetDataSource(String conffile) {
		ogr.RegisterAll();
		//String connstring = "MySQL:test,user=root,password=123456,host=192.168.1.176,port=3306";
		//String connstring = "MySQL:test,user=root,password=123456,host=localhost,port=3306";
		//String connstring = "MySQL:test-mycat,user=mycat,password=mycat,host=192.168.1.177,port=8066";
        //String tablename = "borders2";
		
		String connstring=ReadConf.getGDALConnStr(conffile);
        org.gdal.ogr.Driver dbDriver =ogr.GetDriverByName("MySQL");
        if (dbDriver == null)
        {
            System.out.println("Driver Open failed");
        }
        DataSource pDataSou=null;
        try {
        	pDataSou = dbDriver.Open(connstring,0);
        	if (pDataSou!=null) {
        		System.out.println("Connect Successed!!");
			}else {
				System.out.println("DataSource Open failed");
			}
		} catch (Exception e) {
			System.out.println("DataSource Open failed");
			System.out.println(e.toString());
		}
        return pDataSou;
	}
	
	public static String LayerToGeoJSONFile (Layer pLayer,String outFile) {
		String result="";
		if(pLayer==null) return result;
		try {
			ogr.RegisterAll();
			org.gdal.ogr.Driver pDriver=ogr.GetDriverByName("GeoJSON");
			if (pDriver == null)
			{
			    System.out.println("Driver Open failed");
			}
			//String outFilename="../../temp.geojson";
			File file =new File(outFile);
			if(file.exists())
			{
				try {
					file.delete();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
			DataSource pDataSou =pDriver.CreateDataSource(outFile); 
			if (pDataSou == null)
			{
				System.out.println("DataSource Create failed");
			}
			Layer pLayer2=pDataSou.CopyLayer(pLayer, "tempjson");
			
			//数据销毁
			pDataSou.delete();
			pDataSou=null;
			System.out.println("Export Successed!!");
			result="true";
		} catch (Exception e) {
			System.out.println("ExcuteQuery Error!");
			System.out.println(e.getMessage());
		}
        return result;
	}
	
	public static Layer ExecuteQuery(String strSQL,String wktPoly,String conffile) {
		Layer pLayer=null;
		try {
			Geometry pGeom=null;
			if (wktPoly!="") {
				pGeom=Geometry.CreateFromWkt(wktPoly);
			}
			//DataSource pDataSource=GetDataSource(conffile);
			DataSource pDataSource = DataSouPoolUtil.getDataSource();
            System.out.println(pDataSource);            
			pLayer= pDataSource.ExecuteSQL(strSQL,pGeom,"OGRSQL");//OGRSQL若有此字符串，则不能加limit，若无
			DataSouPoolUtil.close(pDataSource);
		} catch (Exception e) {
			System.out.println("ExcuteQuery Error!");
			System.out.println(e.getMessage());
		}
		return pLayer;
	}
	
	public static int ExportShp(String strSQL,String wktPoly,String outFile,String conffile)
	{
		int result=0;
		try {
			Geometry pGeom=null;
			if (wktPoly!="") {
				pGeom=Geometry.CreateFromWkt(wktPoly);
			}
			DataSource pDataSource=GetDataSource(conffile);
			Layer pLayer= pDataSource.ExecuteSQL(strSQL,pGeom,"OGRSQL");//OGRSQL若有此字符串，则不能加limit，若无
			LayerToShp(pLayer,outFile);
			
			result=1;		
		} catch (Exception e) {
			System.out.println("ExcuteQuery Error!");
			System.out.println(e.getMessage());
		}
		
		return result;
	}
	public static void LayerToShp (Layer pLayer,String outFile) {
		ogr.RegisterAll();
		org.gdal.ogr.Driver pDriver=ogr.GetDriverByName("ESRI Shapefile");
		if (pDriver == null)
        {
            System.out.println("Driver Open failed");
        }
		//String outFilename="../../temp.geojson";
		File file =new File(outFile);
		if(file.exists())
		{
			try {
				file.delete();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
        DataSource pDataSou =pDriver.CreateDataSource(outFile); 
        if (pDataSou == null)
        {
        	System.out.println("DataSource Create failed");
        }
        pDataSou.CopyLayer(pLayer, "exportshp");
        
        //数据销毁
        pDataSou.delete();
        pDataSou=null;
        System.out.println("Export Successed!!");		
	}
	
	public static Geometry GetSpatialfilter(String json) {
		Geometry spatialfilter=null;
		spatialfilter=Geometry.CreateFromJson(json);
		return spatialfilter;
	}
	
}
